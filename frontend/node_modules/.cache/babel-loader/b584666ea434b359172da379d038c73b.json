{"ast":null,"code":"var _jsxFileName = \"/media/eudes/Dados/Cursos/SemanaDevSuperior/SDS3/ws-superior/projeto-sds3/frontend/src/components/DonutChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DonutChart() {\n  _s();\n\n  // HOOK USESTATE - ciclo de vida no react - mantem o estado do componente\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  });\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/amountbyseller`) // ou axios.get(BASE_URL + \"/sales/amountbyseller\")\n    .then(response => {\n      const data = response.data; // casting\n\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n      console.log(chartData);\n    });\n  }, []); // let chartData: ChartData = { labels: [], series: [] }; \n  // const mockData = {\n  // \tseries: [477138, 499928, 444867, 220426, 473088],\n  // \tlabels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n  // }\n\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels\n    },\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n}\n\n_s(DonutChart, \"aUQ8RMGL8CCZbUkZS1EfKr7vfts=\");\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["/media/eudes/Dados/Cursos/SemanaDevSuperior/SDS3/ws-superior/projeto-sds3/frontend/src/components/DonutChart/index.tsx"],"names":["axios","useEffect","useState","Chart","BASE_URL","DonutChart","chartData","setChartData","labels","series","get","then","response","data","myLabels","map","x","sellerName","mySeries","sum","console","log","options","legend","show"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;AAOA,SAASC,UAAT,GAAsB;AAAA;;AAErB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAY;AAAEM,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAZ,CAA1C;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACfD,IAAAA,KAAK,CAACU,GAAN,CAAW,GAAEN,QAAS,uBAAtB,EAA8C;AAA9C,KACEO,IADF,CACOC,QAAQ,IAAI;AACjB,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB,CADiB,CACwB;;AACzC,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAZ,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAEM,QAAV;AAAoBL,QAAAA,MAAM,EAAES;AAA5B,OAAD,CAAZ;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACA,KATF;AAUA,GAXQ,EAWN,EAXM,CAAT,CALqB,CAkBrB;AAKA;AACA;AACA;AACA;;AAEA,QAAMgB,OAAO,GAAG;AACfC,IAAAA,MAAM,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC;AADO,GAAhB;AAMA,sBACC,QAAC,KAAD;AACC,IAAA,OAAO,EAAE,EAAE,GAAGF,OAAL;AAAcd,MAAAA,MAAM,EAAEF,SAAS,CAACE;AAAhC,KADV;AAEC,IAAA,MAAM,EAAEF,SAAS,CAACG,MAFnB;AAGC,IAAA,IAAI,EAAC,OAHN;AAIC,IAAA,MAAM,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA,UADD;AAQA;;GA1CQJ,U;;KAAAA,U;AA4CT,eAAeA,UAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts'\nimport { Salesum } from 'types/sale';\nimport { BASE_URL } from 'utils/requests';\n\ntype ChartData = {\n\tlabels: string[];\n\tseries: number[];\n}\n\nfunction DonutChart() {\n\n\t// HOOK USESTATE - ciclo de vida no react - mantem o estado do componente\n\tconst [chartData, setChartData] = useState<ChartData>({ labels: [], series: [] })\n\n\tuseEffect(() => {\n\t\taxios.get(`${BASE_URL}/sales/amountbyseller`) // ou axios.get(BASE_URL + \"/sales/amountbyseller\")\n\t\t\t.then(response => {\n\t\t\t\tconst data = response.data as Salesum[]; // casting\n\t\t\t\tconst myLabels = data.map(x => x.sellerName);\n\t\t\t\tconst mySeries = data.map(x => x.sum);\n\n\t\t\t\tsetChartData({ labels: myLabels, series: mySeries });\n\n\t\t\t\tconsole.log(chartData);\n\t\t\t});\n\t}, []);\n\n\t// let chartData: ChartData = { labels: [], series: [] }; \n\n\n\n\n\t// const mockData = {\n\t// \tseries: [477138, 499928, 444867, 220426, 473088],\n\t// \tlabels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n\t// }\n\n\tconst options = {\n\t\tlegend: {\n\t\t\tshow: true\n\t\t}\n\t}\n\n\treturn (\n\t\t<Chart\n\t\t\toptions={{ ...options, labels: chartData.labels }}\n\t\t\tseries={chartData.series}\n\t\t\ttype=\"donut\"\n\t\t\theight=\"240\"\n\t\t/>\n\t);\n}\n\nexport default DonutChart;"]},"metadata":{},"sourceType":"module"}